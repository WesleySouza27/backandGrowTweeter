import { PrismaClient, Prisma } from '../generated/prisma/client';
const prisma = new PrismaClient();

// Assuming FollowerCreateInput and Follower types are not correctly generated by Prisma
// Replace Prisma.Follower with any, or define your own type if you know the structure
type Follower = any; // Replace 'any' with the actual type if known

// Função para criar um novo seguidor (follow)
async function criarSeguidor(dados: any): Promise<Follower> {
  const novoSeguidor = await prisma.follower.create({
    data: dados,
  });
  return novoSeguidor;
}

// Função para obter um seguidor pelo ID
async function obterSeguidorPorId(id: string): Promise<Follower | null> {
  const seguidor = await prisma.follower.findUnique({
    where: { id },
  });
  return seguidor;
}

// Função para deletar um seguidor (unfollow)
async function deletarSeguidor(id: string): Promise<void> {
    try {
        await prisma.follower.delete({
            where: { id },
        });
    } catch (error) {
        if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2025') {
            throw new Error('Seguidor não encontrado');
        }
        throw error;
    }
}

// Função para verificar se um usuário segue outro
async function verificarSeSegue(followerId: string, followingId: string): Promise<Follower | null> {
  const seguidor = await prisma.follower.findUnique({
    where: {
      followerId_followingId: { // Usa o nome correto do índice único composto
        followerId: followerId,
        followingId: followingId,
      },
    },
  });
  return seguidor;
}

// Função para obter os seguidores de um usuário
async function obterSeguidoresDoUsuario(usuarioId: string): Promise<Follower[]> {
  const seguidores = await prisma.follower.findMany({
    where: {
      followingId: usuarioId,
    },
    include: {
      follower: true, // Inclui os dados do seguidor
    },
  });
  return seguidores;
}

// Função para obter os usuários que um usuário segue
async function obterSeguindoDoUsuario(usuarioId: string): Promise<Follower[]> {
  const seguindo = await prisma.follower.findMany({
    where: {
      followerId: usuarioId,
    },
    include: {
      following: true, // Inclui os dados do usuário seguido
    },
  });
  return seguindo;
}

export { criarSeguidor, obterSeguidorPorId, deletarSeguidor, verificarSeSegue, obterSeguidoresDoUsuario, obterSeguindoDoUsuario };



